:q
(let [(fact (fn [n] (if (= n 0) 1 (* n (fact (- n 1))))))] (fact 5))
(let [(fact (fn [n] (if (= n 0) 1 (fact (- n 1)))))] (fact 5))
:q
(fact 5)
(defn fact [n] (if (= n 0) 1 (* n (fact (- n 1)))))
:q
(fact 5)
(fact 0)
(defn fact [n] (if (= n 0) 1 (fact (- n 1))))
:q
(= 0 0)
(fact 0)
(fact 5)
(defn fact [n] (if (= n 0) 1 (fact (- n 1))))
:q
(defn fact [n] (if (= n 0) 1 (fact (- n 1))))
:q
(defn fact [n] (if (= n 0) 1 (fact (- n 1))))
:q
(fact 5)
(defn fact [n] (if (= n 0) 1 (fact (- n 1))))
:q
(let [(fact (fn [n] (if (= n 0) 1 (fact (- n 1)))))] (fact 5))
(let [fact (fn [n] (if (= n 0) 1 (fact (- n 1)))))] (fact 5))
(let [fact (fn [n] (if (= n 0) 1 (fact (- n 1))))] (fact 5))
:q
(f 10)
(defn f [n] (+ n 1))
(fact 5)
(defn fact [n] (if (= n 0) 1 (fact (- n 1))))
:q
(defn fact [n] (if (= n 0) 1 (fact (- n 1))))
:q
(defn fact [n] (if (= n 0) 1 (fact (- n 1))))
:q
(defn fact [n] (if (= n 0) 1 (fact (- n 1))))
:q
(defn fact [n] (if (= n 0) 1 (fact (- n 1))))
:q
(defn fact [n] (if (= n 0) 1 (fact (- n 1))))
:q
(defn fact [n] (if (= n 0) 1 (fact (- n 1))))
:q
(fact 5)
(defn fact [n] (if (= n 0) 1 (fact (- n 1))))
:q
(fact 5)
(defn fact [n] (if (= n 0) 1 (fact (- n 1))))
:q
(defn fact [n] (if (= n 0) 1 (fact (- n 1))))
:q
(let [(fact (fn [n] (if (= n 0) 1 (fact (- n 1)))))] (fact 5))
:q
(let [(fact (fn [n] (if (= n 0) 1 (fact (- n 1)))))] (fact 5))
(let [(fact (fn [n] (if (= n 0) 1 (fact (- n 1))))] (fact 5))
(let [(fact (fn [n] (if (= n 0) 1 (fact (- n 1))))] (fact 5)]
(defn fact [n] (if (= n 0) 1 (fact (- n 1))))
:q
(let [(x 1) (y 2)] (+ x y))
:q
(if (> x 0) (= 0 0) (> 1 0))
(if (> x 0) 2 (> 1 0))
(if (> x 0) 2 1)
(+ x 1)
(def x 1)
:q
:q
(+ x 1)
(def x 1)
